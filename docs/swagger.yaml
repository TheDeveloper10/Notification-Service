openapi: 3.0.3
info:
  title: Notification Service
  description: This is a Notification Service you can use to notify your users across different platforms (email, sms, push)
  version: 1.0.11
tags:
  - name: template
    description: Operations related to templates
  - name: notification
    description: Operations related to notifications
paths:
  /v1/templates:
    get:
      tags:
        - template
      operationId: getTemplates
      summary: Get a list of templates and filter them
      parameters:
        - name: size
          in: query
          description: Maximum number of templates to output
          required: false
          schema:
            type: integer
            format: int64
            default: 20
            minimum: 1
        - name: page
          in: query
          description: Page of templates to go to (skips page * size templates and gets you next ones)
          required: false
          schema:
            type: integer
            format: int64
            default: 1
            minimum: 1
      responses:
        '200':
          description: Successfully fetched a list of templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfTemplateEntities'
    post:
      tags:
        - template
      summary: Create a new template
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteTemplateRequest'
        required: true
      responses:
        '201':
          description: Successfully created a new template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateMetadata'
        '400':
          description: Invalid request body
        '415':
          description: Unsupported Content-Type
  /v1/templates/{templateId}:
    get:
      tags:
        - template
      operationId: getTemplate
      summary: Get an existing template
      parameters:
        - name: templateId
          in: path
          description: ID of a template to operate on
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully fetched the template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateEntity'
        '400':
          description: Invalid request body
        '404':
          description: Template not found
        '415':
          description: Unsupported Content-Type
    put:
      tags:
        - template
      operationId: updateTemplate
      summary: Update an existing template
      parameters:
        - name: templateId
          in: path
          description: ID of a template to operate on
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteTemplateRequest'
      responses:
        '200':
          description: Successfully updated the template
        '400':
          description: Invalid request body
        '404':
          description: Template not found
        '415':
          description: Unsupported Content-Type
    delete:
      tags:
        - template
      operationId: deleteTemplate
      summary: Delete an existing template
      parameters:
        - name: templateId
          in: path
          description: ID of a template to operate on
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully deleted the template
        '400':
          description: Invalid request body
        '404':
          description: Template not found
        '415':
          description: Unsupported Content-Type
  /v1/notifications:
    get:
      tags:
        - notification
      operationId: getNotifications
      summary: Get a list of templates and filter them
      parameters:
        - name: size
          in: query
          description: Maximum number of templates to output
          required: false
          schema:
            type: integer
            format: int64
            default: 20
            minimum: 1
        - name: page
          in: query
          description: Page of templates to go to (skips page * size templates and gets you next ones)
          required: false
          schema:
            type: integer
            format: int64
            default: 1
            minimum: 1
        - name: appId
          in: query
          description: Filter by id of the app
          required: false
          schema:
            type: string
            format: string
        - name: templateId
          in: query
          description: Filter by id of used template
          required: false
          schema:
            type: integer
            format: int64
        - name: startTime
          in: query
          description: All notifications must have a sent time that is greater than startTime
          required: false
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: All notifications must have a sent time that is lesser than endTime
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully fetched a list of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfNotificationEntities'
    post:
      tags:
        - notification
      operationId: sendNotification
      summary: Send a notification with a given template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequest'
      responses:
        '200':
          description: Successfully sent notification
        '400':
          description: Invalid request body
        '404':
          description: Template not found
        '415':
          description: Unsupported Content-Type

components:
  schemas:
    ListOfTemplateEntities:
      type: array
      items:
        $ref: '#/components/schemas/TemplateEntity'
    TemplateEntity:
      type: object
      allOf:
        - $ref: '#/components/schemas/WriteTemplateRequest'
      properties:
        id:
          type: integer
          format: int64
          example: 82
    WriteTemplateRequest:
      type: object
      properties:
        contactType:
          type: string
          format: string
          example: "email"
          enum:
            - email
            - push
            - sms
        template:
          type: string
          format: string
          example: "Hello, @{secondName}. We are happy you joined us. Claim your welcome reward at @{welcomeReward}."
        language:
          type: string
          format: string
          example: "EN"
          enum:
            - BG
            - EN
            - DE
            - ES
            - DA
            - CS
        type:
          type: string
          format: string
          maxLength: 8
          example: "register"
    TemplateMetadata:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 582
        placeholders:
          type: string
          format: string
          example: "secondName, welcomeReward"
    ListOfNotificationEntities:
      type: array
      items:
        $ref: '#/components/schemas/NotificationEntity'
    NotificationEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 57123
        templateId:
          type: integer
          format: int64
          example: 4
        appId:
          type: string
          format: string
          example: "My-App"
        contactInfo:
          type: string
          format: string
          example: "john.doe@example.com"
        title:
          type: string
          format: string
          example: "Welcome!"
        message:
          type: string
          format: string
          example: "Welcome to our community, John! We hope you have a great time!"
        sentTime:
          type: integer
          format: int64
          description: Unix timestamp of the time the notification was sent
          example: 1660558818
    SendNotificationRequest:
      type: object
      properties:
        appId:
          type: string
          format: string
          example: "special_app"
          maxLength: 16
        templateId:
          type: integer
          format: int64
          example: 57
        contactType:
          type: string
          format: string
          example: "email"
          enum:
            - email
            - push
            - sms
        title:
          type: string
          format: string
          example: "Welcome to our app!"
        universalPlaceholders:
          type: array
          items:
            $ref: '#/components/schemas/TemplatePlaceholder'
          description: Placeholders universal to all targets
        targets:
          type: array
          items:
            $ref: '#/components/schemas/NotificationTarget'
          description: List of people that will receive notifications
    NotificationTarget:
      type: object
      properties:
        email:
          type: string
          format: string
          description: Email of target user (phoneNumber and fcmRegistrationToken must not be given)
        phoneNumber:
          type: string
          format: string
          description: Phone number of target user (email and fcmRegistrationToken must not be given)
        fcmRegistrationToken:
          type: string
          format: string
          description: Firebase Cloud Messaging Registration Token of target user (email and phoneNumber must not be given)
        placeholders:
          type: array
          items:
            $ref: '#/components/schemas/TemplatePlaceholder'
          description: Placeholders relative to this target only
    TemplatePlaceholder:
      type: object
      properties:
        key:
          type: string
          format: string
          example: firstName
        val:
          type: string
          format: string
          example: John